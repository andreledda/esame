import processing.serial.*;

// Variabili globali per tutti i componenti
Serial myPort;
String[] serialData;
float radarDistance, radarAngle, compass, gpsLat, gpsLon, distance, letturaEol, letturaSol;
String lcd1_riga1 = "", lcd1_riga2 = "", lcd2_riga1 = "", lcd2_riga2 = "";

// Variabili ecoscandaglio
float[] depthValues;
int depthIndex = 0;

// Variabili radar
ArrayList<PVector> objectHistory = new ArrayList<PVector>();

// Variabili GPS
ArrayList<Waypoint> waypoints = new ArrayList<Waypoint>();
PImage mappa, barca;
float zoom = 1.0;
float offsetX = 0, offsetY = 0;
boolean dragging = false;
float dragX, dragY;
float bussolaAngle = 0;
float velocita = 0;
float direzione = 0;
float latitudine = 43.615;
float longitudine = 10.395;
boolean mostraRotta = true;
int waypointSelezionato = -1;

// Dimensioni e posizioni dei riquadri
int margin = 20;
int headerHeight = 40;
int panelWidth, panelHeight;

void setup() {
  fullScreen();
  smooth();
  
  // Calcola dimensioni dei pannelli
  panelWidth = (width - 3*margin) / 2;
  panelHeight = (height - 3*margin - headerHeight) / 2;
  
  // Inizializza ecoscandaglio
  depthValues = new float[100];
  for (int i = 0; i < depthValues.length; i++) {
    depthValues[i] = 0;
  }
  
  // Inizializza comunicazione seriale
  try {
    myPort = new Serial(this, Serial.list()[0], 9600);
    myPort.bufferUntil('\n');
    println("Connesso a: " + Serial.list()[0]);
  } catch (Exception e) {
    println("Errore connessione seriale: " + e.getMessage());
  }
  
  // Carica l'immagine della mappa
  mappa = loadImage("mappa.png");
  if (mappa == null) {
    println("Attenzione: impossibile caricare mappa.png, verrà creata una mappa di default");
    // Crea una mappa di fallback
    mappa = createImage(2000, 2000, RGB);
    for (int i = 0; i < mappa.pixels.length; i++) {
      int x = i % mappa.width;
      int y = i / mappa.width;
      if ((x/100 + y/100) % 2 == 0) {
        mappa.pixels[i] = color(100, 150, 200);
      } else {
        mappa.pixels[i] = color(50, 100, 150);
      }
    }
  }
  
  // Crea l'immagine della barca
  barca = createImage(40, 40, ARGB);
  barca.loadPixels();
  for (int i = 0; i < barca.pixels.length; i++) {
    barca.pixels[i] = color(0, 0);
  }
  for (int y = 0; y < 40; y++) {
    for (int x = 0; x < 40; x++) {
      if (abs(x-20) < y/2 && y < 30) {
        barca.pixels[y*40 + x] = color(200, 100, 50);
      }
    }
  }
  barca.updatePixels();
  
  // Aggiungi waypoint di esempio
  waypoints.add(new Waypoint(43.615, 10.395, "Partenza"));
  waypoints.add(new Waypoint(43.625, 10.405, "Waypoint 1"));
  waypoints.add(new Waypoint(43.635, 10.415, "Arrivo"));
}

void serialEvent(Serial myPort) {
  try {
    String inString = myPort.readStringUntil('\n').trim();
    if (inString != null) {
      serialData = split(inString, ',');
      if (serialData.length >= 12) {
        radarDistance = float(serialData[0]);
        radarAngle = float(serialData[1]);
        compass = float(serialData[2]);
        gpsLat = float(serialData[3]);
        gpsLon = float(serialData[4]);
        distance = float(serialData[5]);
        letturaEol = float(serialData[6]);
        letturaSol = float(serialData[7]);
        lcd1_riga1 = serialData[8];
        lcd1_riga2 = serialData[9];
        lcd2_riga1 = serialData[10];
        lcd2_riga2 = serialData[11];
        
        // Aggiorna ecoscandaglio
        depthValues[depthIndex] = distance;
        depthIndex = (depthIndex + 1) % depthValues.length;
        
        // Aggiorna radar
        if (radarDistance > 0 && radarDistance < 500) {
          float x = margin + panelWidth + margin/2 + cos(radians(radarAngle)) * radarDistance * (panelWidth/500.0);
          float y = headerHeight + margin + sin(radians(radarAngle)) * radarDistance * (panelHeight/500.0);
          objectHistory.add(new PVector(x, y));
          if (objectHistory.size() > 100) {
            objectHistory.remove(0);
          }
        }
      }
    }
  } catch (Exception e) {
    println("Errore parsing dati seriali: " + e.getMessage());
  }
}

void draw() {
  background(30);
  
  // Disegna tutti i componenti nei rispettivi riquadri
  drawPanelBorders();
  drawEchosounder();
  drawSensorBoxes();
  drawRadar();
  drawGPS();
  drawLCDs();
}

void drawPanelBorders() {
  // Disegna bordi dei pannelli
  noFill();
  stroke(100);
  strokeWeight(2);
  
  // Riga superiore
  rect(margin, headerHeight + margin, panelWidth, panelHeight); // Ecoscandaglio
  rect(margin*2 + panelWidth, headerHeight + margin, panelWidth, panelHeight); // Sensori + Radar
  
  // Riga inferiore
  rect(margin, headerHeight + margin*2 + panelHeight, panelWidth, panelHeight); // GPS
  rect(margin*2 + panelWidth, headerHeight + margin*2 + panelHeight, panelWidth, panelHeight); // LCD
}

void drawEchosounder() {
  // Area ecoscandaglio (alto a sinistra)
  pushMatrix();
  translate(margin, headerHeight + margin);
  
  // Titolo
  fill(255);
  textSize(20);
  text("Ecoscandaglio", 0, -10);
  
  // Griglia
  stroke(200);
  strokeWeight(1);
  for (int yValue = 250; yValue >= 0; yValue -= 50) {
    float y = map(yValue, 0, 250, 50, panelHeight - 50);
    line(50, y, panelWidth - 50, y);
    fill(100);
    textAlign(RIGHT, CENTER);
    text(yValue, 45, y);
  }
  
  // Linea profondità
  stroke(243, 255, 166);
  strokeWeight(2);
  noFill();
  beginShape();
  for (int i = 0; i < depthValues.length; i++) {
    float x = map(i, 0, depthValues.length - 1, 50, panelWidth - 50);
    float y = map(depthValues[i], 0, 250, 50, panelHeight - 50);
    vertex(x, y);
  }
  endShape();
  
  // Display profondità corrente
  fill(255);
  textAlign(RIGHT, CENTER);
  text("Profondità: " + nf(depthValues[(depthIndex - 1 + depthValues.length) % depthValues.length], 0, 1) + " m", panelWidth - 10, 20);
  
  popMatrix();
}

void drawRadar() {
  // Area radar (metà destra del pannello in alto a destra)
  pushMatrix();
  translate(margin*2 + panelWidth + panelWidth/2, headerHeight + margin + panelHeight/2);
  
  // Titolo
  fill(255);
  textSize(20);
  text("Radar", -panelWidth/2 + 20, -panelHeight/2 + 20);
  
  // Cerchi radar
  noFill();
  stroke(98, 245, 31, 150);
  strokeWeight(1);
  float radarRadius = min(panelWidth, panelHeight) * 0.4;
  for (int r = 1; r <= 3; r++) {
    arc(0, 0, r*radarRadius/1.5, r*radarRadius/1.5, PI, TWO_PI);
  }
  
  // Linee radar
  for (int a = 0; a <= 180; a += 30) {
    float x = -radarRadius * cos(radians(a));
    float y = -radarRadius * sin(radians(a));
    stroke(98, 245, 31, 100);
    line(0, 0, x, y);
  }
  
  // Linea scansione radar
  stroke(30, 250, 60);
  strokeWeight(2);
  line(0, 0, radarRadius/1.5 * cos(radians(radarAngle)), -radarRadius/1.5 * sin(radians(radarAngle)));
  
  // Cronologia oggetti radar
  noStroke();
  for (PVector p : objectHistory) {
    float alpha = map(p.dist(new PVector(margin*2 + panelWidth + panelWidth/2, headerHeight + margin + panelHeight/2)), 0, radarRadius, 255, 50);
    fill(255, 100, 100, alpha);
    ellipse(p.x - (margin*2 + panelWidth + panelWidth/2), p.y - (headerHeight + margin + panelHeight/2), 5, 5);
  }
  
  // Oggetto radar
  if (radarDistance > 0 && radarDistance < 400) {
    float objSize = map(radarDistance, 0, 400, 15, 5);
    float objX = radarDistance * (radarRadius/400.0) * cos(radians(radarAngle));
    float objY = -radarDistance * (radarRadius/400.0) * sin(radians(radarAngle));
    fill(255, 0, 0);
    ellipse(objX, objY, objSize, objSize);
  }
  
  // Etichette radar
  fill(98, 245, 31);
  textSize(14);
  text("100m", -radarRadius/3, 20);
  text("200m", -radarRadius*2/3, 20);
  text("0m", 0, 20);
  text("100m", radarRadius/3, 20);
  text("200m", radarRadius*2/3, 20);
  text("0°", -radarRadius-10, 0);
  text("180°", radarRadius+10, 0);
  text("90°", 0, -radarRadius-10);
  
  // Dati radar
  fill(255);
  text("Angolo: " + radarAngle + "°", -panelWidth/4, panelHeight/2 - 40);
  text("Distanza: " + radarDistance + " m", -panelWidth/4, panelHeight/2 - 20);
  
  popMatrix();
}

void drawGPS() {
  // Area GPS (basso a sinistra)
  pushMatrix();
  translate(margin, headerHeight + margin*2 + panelHeight);
  
  // Titolo
  fill(255);
  textSize(20);
  text("GPS Nautico", 0, -10);
  
  // Area mappa
  pushMatrix();
  translate(panelWidth/2, panelHeight/2);
  scale(0.8);
  
  // Disegna mappa
  imageMode(CENTER);
  image(mappa, offsetX, offsetY, mappa.width*zoom, mappa.height*zoom);
  
  // Disegna rotta
  if (mostraRotta && waypoints.size() > 1) {
    stroke(0, 255, 255, 150);
    strokeWeight(3/zoom);
    noFill();
    beginShape();
    for (Waypoint wp : waypoints) {
      float x = lonToX(wp.lon) + offsetX;
      float y = latToY(wp.lat) + offsetY;
      vertex(x, y);
    }
    endShape();
  }
  
  // Disegna waypoints
  for (int i = 0; i < waypoints.size(); i++) {
    Waypoint wp = waypoints.get(i);
    float x = lonToX(wp.lon) + offsetX;
    float y = latToY(wp.lat) + offsetY;
    
    fill(i == waypointSelezionato ? color(255, 255, 0) : color(255, 0, 0));
    ellipse(x, y, 15/zoom, 15/zoom);
    
    if (zoom > 0.5) {
      fill(255);
      textSize(12/zoom);
      textAlign(CENTER);
      text(wp.nome, x, y + 20/zoom);
    }
  }
  
  // Disegna barca
  pushMatrix();
  float boatX = lonToX(longitudine) + offsetX;
  float boatY = latToY(latitudine) + offsetY;
  translate(boatX, boatY);
  rotate(radians(bussolaAngle + 90));
  imageMode(CENTER);
  image(barca, 0, 0, 40/zoom, 40/zoom);
  popMatrix();
  
  popMatrix();
  
  // Pannello dati GPS
  fill(50, 200);
  rect(10, panelHeight - 150, panelWidth - 20, 140);
  
  fill(255);
  textSize(16);
  textAlign(LEFT, TOP);
  text("Lat: " + nf(gpsLat, 0, 5) + "°", 20, panelHeight - 130);
  text("Lon: " + nf(gpsLon, 0, 5) + "°", 20, panelHeight - 100);
  text("Velocità: " + nf(velocita, 0, 1) + " nodi", 20, panelHeight - 70);
  text("Direzione: " + nf(direzione, 0, 0) + "°", 20, panelHeight - 40);
  
  // Bussola
  drawCompass(panelWidth - 100, panelHeight - 100);
  
  popMatrix();
}

void drawLCDs() {
  // Area display LCD (basso a destra)
  pushMatrix();
  translate(margin*2 + panelWidth, headerHeight + margin*2 + panelHeight);
  
  // Titolo
  fill(255);
  textSize(20);
  text("Display LCD", 0, -10);
  
  // LCD 1 (VHF Radio)
  drawLCDDisplay(panelWidth/4 - 125, 50, lcd1_riga1, lcd1_riga2, "VHF Radio");
  
  // LCD 2 (Timer)
  drawLCDDisplay(panelWidth*3/4 - 125, 50, lcd2_riga1, lcd2_riga2, "Timer");
  
  popMatrix();
}

void drawLCDDisplay(float x, float y, String line1, String line2, String title) {
  pushMatrix();
  translate(x, y);
  
  // Sfondo LCD
  fill(50, 100, 50);
  rect(0, 0, 250, 100);
  
  // Schermo LCD
  fill(20, 40, 20);
  rect(10, 10, 230, 80);
  
  // Testo LCD
  fill(150, 255, 150);
  textSize(16);
  textAlign(LEFT, TOP);
  text(line1, 20, 30);
  text(line2, 20, 60);
  
  // Titolo LCD
  fill(255);
  textSize(14);
  text(title, 0, -20);
  
  popMatrix();
}

void drawSensorBoxes() {
  // Area sensori (metà sinistra del pannello in alto a destra)
  pushMatrix();
  translate(margin*2 + panelWidth, headerHeight + margin);
  
  // Titolo
  fill(255);
  textSize(20);
  text("Letture Sensori", 0, -10);
  
  // Box EOL
  drawSensorBox(panelWidth/4 - 60, 590, "EOL", letturaEol);
  
  // Box SOL
  //drawSensorBox(panelWidth*3/4 - 60, 50, "SOL", letturaSol);
  
  popMatrix();
}

void drawSensorBox(float x, float y, String label, float value) {
  pushMatrix();
  translate(x, y);
  
  // Sfondo box
  fill(50, 50, 100);
  rect(0, 0, 120, 80);
  
  // Display valore
  fill(200, 200, 255);
  textSize(24);
  textAlign(CENTER, CENTER);
  text(nf(value, 0, 1), 60, 30);
  
  // Etichetta
  fill(255);
  textSize(16);
  text(label, 60, 60);
  
  popMatrix();
}

void drawCompass(float x, float y) {
  pushMatrix();
  translate(x, y);
  
  // Cerchio bussola
  fill(40, 150);
  stroke(100);
  strokeWeight(2);
  ellipse(0, 0, 100, 100);
  
  // Ago bussola
  rotate(radians(compass));
  stroke(255, 0, 0);
  strokeWeight(3);
  line(0, 0, 0, -40);
  
  // Triangolo ago bussola
  fill(255, 0, 0);
  noStroke();
  triangle(-3, -40, 3, -40, 0, -50);
  
  // Cerchio centrale
  fill(50);
  ellipse(0, 0, 15, 15);
  
  popMatrix();
  
  // Etichette bussola
  fill(255);
  textSize(12);
  textAlign(CENTER, CENTER);
  text("N", x, y - 60);
  text("E", x + 40, y);
  text("S", x, y + 60);
  text("W", x - 40, y);
  text(nf(compass, 0, 0)+"°", x, y + 80);
}

float lonToX(float lon) {
  return map(lon, longitudine-0.1, longitudine+0.1, -500, 500);
}

float latToY(float lat) {
  return map(lat, latitudine-0.1, latitudine+0.1, -500, 500);
}

void mousePressed() {
  if (mouseButton == LEFT) {
    // Controlla se il click è nell'area GPS
    if (mouseX > margin && mouseX < margin + panelWidth && 
        mouseY > headerHeight + margin*2 + panelHeight && mouseY < height - margin) {
      waypointSelezionato = -1;
      for (int i = 0; i < waypoints.size(); i++) {
        Waypoint wp = waypoints.get(i);
        float x = margin + (lonToX(wp.lon) + offsetX) * 0.8 * panelWidth/1000.0 + panelWidth/2;
        float y = headerHeight + margin*2 + panelHeight + (latToY(wp.lat) + offsetY) * 0.8 * panelHeight/1000.0 + panelHeight/2;
        if (dist(mouseX, mouseY, x, y) < 15) {
          waypointSelezionato = i;
          break;
        }
      }
      
      if (waypointSelezionato == -1) {
        dragging = true;
        dragX = mouseX;
        dragY = mouseY;
      }
    }
  }
}

void mouseDragged() {
  if (dragging) {
    offsetX += (mouseX - dragX) / (zoom * 0.8);
    offsetY += (mouseY - dragY) / (zoom * 0.8);
    dragX = mouseX;
    dragY = mouseY;
  } else if (waypointSelezionato >= 0) {
    Waypoint wp = waypoints.get(waypointSelezionato);
    wp.lon = map(mouseX - margin - offsetX*zoom*0.8 - panelWidth/2, -500*zoom*0.8, 500*zoom*0.8, longitudine-0.1, longitudine+0.1);
    wp.lat = map(mouseY - headerHeight - margin*2 - panelHeight - offsetY*zoom*0.8 - panelHeight/2, -500*zoom*0.8, 500*zoom*0.8, latitudine-0.1, latitudine+0.1);
  }
}

void mouseReleased() {
  dragging = false;
  waypointSelezionato = -1;
}

void keyPressed() {
  if (key == '+' || key == '=') {
    zoom *= 1.1;
  } else if (key == '-' || key == '_') {
    zoom /= 1.1;
  } else if (key == 'c') {
    objectHistory.clear();
  } else if (key == ' ') {
    waypoints.add(0, new Waypoint(latitudine, longitudine, "Pausa"));
  }
}

class Waypoint {
  float lat, lon;
  String nome;
  
  Waypoint(float lat, float lon, String nome) {
    this.lat = lat;
    this.lon = lon;
    this.nome = nome;
  }
}
